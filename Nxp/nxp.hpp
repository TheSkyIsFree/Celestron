#ifndef __NXP_H__
#define __NXP_H__

//==============================================================================================================================
// standard header includes
//==============================================================================================================================
//#include <string.h>                                             // std string and memory operations
//#include <math.h>                                               // std math operations
//#include <stm32f10x_lib.h>                                      // stm32f10x definitions
//#include <RTL.H>                                                // real-time lib
//#include "..\type.h"                                            // platform type and hardware specific definitions


//******************************************************************************************************************************
//******                                         global defines and typedefs                                            ********
//******************************************************************************************************************************
#define ALIGNED_STARS_BUFSIZE	256
#define NUM_NAMED_STARS         103
#define NXP_MAXCALSTARS         10
#define NXP_MAXTERMS            6
#define __packed



typedef struct PaeTg
{
	double
	azmRad;
	double
	altRad;
	double
	phiOffsetRad;
}
PaeTy;



typedef __packed struct NameStarDbTg {
  char const
    *Name;
  double
    RaRadD;
  double
    DecRadD;
  double
    MagD;
} NameStarDbTy;



typedef __packed struct AlignStarTg {
  double                                        // 8
    RaRadD;
  double                                        // 8
    DecRadD;
  double                                        // 8
    AzmRadD;
  double                                        // 8
    AltRadD;
  double                                        // 8
    LstMarkD;
  double                                        // 8
    JdMarkD;
  double                                        // 8
    DistErrRadD;
  double                                        // 8
    RaErrRadD;
  double                                        // 8
    DecErrRadD;
  bool                                          // 4
    IsUsedB;
} AlignStarTy;                                  // 76 bytes
                                                // 76 * 10 = 760 bytes


typedef __packed struct ModelTg {
  BOOL_D                                        // 4
    IsDstB;
  uint16_t                                          // 2
    DummyUW;
  uint8_t                                         // 1
    IsEqAlignB;
  uint8_t                                         // 1
    IsGemB;
  BOOL_D                                        // 4
    AzIncCwB;
  BOOL_D                                        // 4
    AltIncUpB;
  double                                        // 8    //NOTE: modified from original, this is now in terms of DAYS not HOURS
    UtcOffsetDaysD;
  double                                        // 8
    LonRadD;
  double                                        // 8
    LatRadD;
  double                                        // 8
    PressureD;
  double                                        // 8
    TemperatureD;

  double                                        // 8
    AzEncZeroD;
  double                                        // 8
    AltEncZeroD;
  double                                        // 8
    ErrorNorthD;
  double                                        // 8
    ErrorWestD;

  double                                        // 8 * 6
    MountErrorsD[NXP_MAXTERMS];
  uint32_t                                           // 4
    MaxTermsUT;
  uint32_t                                           // 4
    NumCalStarsUT;

  double                                        // 8
    InstabilityD;
  double                                        // 8
    MaxErrorRadD;
  double                                        // 8
    RmsErrorRadD;
  double                                        // 8
    MaxErrorAllRadD;
  double                                        // 8
    RmsErrorAllRadD;                            // 184 bytes
} ModelTy;



typedef struct Vect3Tg {
  double
    X;
  double
    Y;
  double
    Z;
} Vect3Ty;



//******************************************************************************************************************************
//******                                     exports of variables and functions                                         ********
//******************************************************************************************************************************


extern NameStarDbTy NamedStarsDb[NUM_NAMED_STARS];

//==============================================================================================================================
// VAR: AlignStarASt
//==============================================================================================================================
// DESC:  the calibration "stars" (virtual star alignment points)
//==============================================================================================================================
extern AlignStarTy
  AlignStarASt[NXP_MAXCALSTARS];



//==============================================================================================================================
// VAR: NxpModelSt
//==============================================================================================================================
// DESC:  the PointXP alignment model parameters and status variables
//==============================================================================================================================
extern ModelTy
  NxpModelSt;



//==============================================================================================================================
// VAR: NxpModelSt
//==============================================================================================================================
// DESC:  the PointXP alignment model parameters and status variables
//==============================================================================================================================
extern BOOL_D
  PolarAlignGotoB;
extern uint32_t 
  PolarAlignStepUT;



extern char
  AlignedStars[ALIGNED_STARS_BUFSIZE];

extern uint32_t 
  NxpNumSkyAlignStarsUT;


//==============================================================================================================================
// FUNC: Nxp_Init() -- initialize the Point XP model
//==============================================================================================================================
// DESC:
//==============================================================================================================================
extern void Nxp_Init(
  double
    LonRad,
  double
    LatRad,
  bool
    isGemB,
  bool
    isEqAlignB,
  double
    UtcOffsetDay,    // modified from original, this is UTC offset in DAYS...
  bool
    isDst
);



//==============================================================================================================================
// FUNC: Nxp_FnCtoEnc()
//==============================================================================================================================
// DESC: this is the main telescope pointing routine RA,Dec are star coords in radians JdMarkD is the Julian Day at time of
//       measurement LSTMark is the LST at time of measurement AltEnc and AzEnc are the corrected and scaled encoder outputs
//       full error model is used generates negative theta solution if Tsign = -1
//==============================================================================================================================
extern void Nxp_FnCtoEnc(
  double
    LstMarkD,
  double
    JdMarkD,
  double
    RA,
  double
    Dec,
  int
    Tsign,
  double
    *AltEnc,
  double
    *AzEnc
);



//==============================================================================================================================
// FUNC: Nxp_FnEnctoC()
//==============================================================================================================================
// DESC: this the main Telescope to Celestial pointing routine given the encoder readings, it calculates where telescope is
//       pointing in RA and Dec it uses the mount error model LST is the current Local Sidereal Time JD is the current Julian
//       Day RA and Dec are in radians
//==============================================================================================================================
extern void Nxp_FnEnctoC(
  double
    LST,
  double
    JD,
  double
    AltEnc,
  double
    AzEnc,
  double
    *RARad,
  double
    *DecRad
);



//==============================================================================================================================
// FUNC: Nxp_GetTSignFromRa()
//==============================================================================================================================
// DESC: if using GEM mount, determines which side of merdian object is on
//==============================================================================================================================
extern int32_t  Nxp_GetTSignFromRa(                                 // RETR: TSign value (1, or -1)
  double                                                        //
    LstRadD,                                                    // PASS: Local Sidereal Time (Radians)
  double                                                        //
    RaRadD                                                      // PASS: Ra Position (Radians)
);



//==============================================================================================================================
// FUNC: Nxp_MdlCalibrate()
//==============================================================================================================================
// DESC: Performs complete mount calibration
//==============================================================================================================================
extern BOOL_D Nxp_MdlCalibrate(
  void
);



//==============================================================================================================================
// FUNC: Nxp_MdlCalStarErrors()
//==============================================================================================================================
// DESC: this routine calculates the pointing errors to each of the calstars given the current mount model it should be called
//       before displaying the Calstars or the Mount model
//==============================================================================================================================
extern void Nxp_MdlCalStarErrors(
  void
);



//==============================================================================================================================
// FUNC: Nxp_MdlCalStarAdd()
//==============================================================================================================================
// DESC: Adds a star to the calibration list
//==============================================================================================================================
extern BOOL_D Nxp_MdlCalStarAdd(
  CelestialRefTy
    StarSt
);



//==============================================================================================================================
// FUNC: Nxp_MdlCalStarAddAt() -- add reference at specified index
//==============================================================================================================================
// DESC: Adds a reference point to the calibration list; replaces if the slot is occupied, if index > num refs, it appends
//==============================================================================================================================
extern BOOL_D Nxp_MdlCalStarAddAt(                                // RETR: result of add reference point operation
  uint32_t                                                           //
    IndexUT,                                                    // PASS: 'at' index
  CelestialRefTy                                                //
    StarSt                                                      // PASS: celestial refernce struct with ref data
);



//==============================================================================================================================
// FUNC: Nxp_MdlCalStarClear()
//==============================================================================================================================
// DESC: Adds a star to the calibration list
//==============================================================================================================================
extern void Nxp_MdlCalStarClear(
  uint32_t 
    RefIdxUT
);



//==============================================================================================================================
// FUNC: Nxp_MdlCalStarDel()
//==============================================================================================================================
// DESC: Adds a star to the calibration list
//==============================================================================================================================
extern BOOL_D Nxp_MdlCalStarDel(
  uint32_t 
    RefIdxUT
);



//==============================================================================================================================
// FUNC: Nxp_MdlOptimize()
//==============================================================================================================================
// DESC: optimizes the pointing model to remove latitude and LST error due to time / location error
//==============================================================================================================================
extern double Nxp_MdlOptimize(
  void
);



//==============================================================================================================================
// FUNC: Nxp_MirrorAlignReference() -- mirror the alignment reference point
//==============================================================================================================================
// DESC: requests a model update, if returns FALSE, then another task is requesting update
//==============================================================================================================================
extern void Nxp_MirrorAlignReference(                           // RETR: none
  int32_t                                                           //
    AbsXRefSL,                                                  // PASS: -> in: Abs X Reference
  int32_t                                                           //
    AbsYRefSL,                                                  // PASS: -> in: Abs Y Reference
  int32_t                                                           //
    *OffsXRefSL,                                                // PASS: -> out: Mirrored X Reference
  int32_t                                                           //
    *OffsYRefSL,                                                // PASS: -> out: Mirrored Y Reference
  int32_t                                                           //
    CcdXCtrSL,                                                  // PASS: CCD X Ctr
  int32_t                                                           //
    CcdYCtrSL                                                   // PASS: CCD Y Ctr
);



//==============================================================================================================================
// FUNC: Nxp_MdlReset()
//==============================================================================================================================
// DESC: Adds a star to the calibration list
//==============================================================================================================================
extern void Nxp_MdlReset(
  void
);



//==============================================================================================================================
// FUNC: Nxp_MdlUpdate() -- update NXP model
//==============================================================================================================================
// DESC: updates the pointing model
//==============================================================================================================================
extern void Nxp_MdlUpdate(                                      // RETR: none
  void                                                          // PASS: none
);                                                              //

extern void Nxp_SkyAlignAddStar(
  CelestialRefTy
    star
);
//==============================================================================================================================
// FUNC: Nxp_SkyAlign() -- attempt sky align
//==============================================================================================================================
// DESC: takes three calibration references, and attempts to match them to named stars for alignment
//==============================================================================================================================
extern double Nxp_SkyAlign(                                     // RETR: none
  void                                                          // PASS: none
);                                                              //



//==============================================================================================================================
// FUNC: Nxp_RotateToZeroPae()
//==============================================================================================================================
// DESC: Will modify the model so that the mount model is polar aligned
//==============================================================================================================================
void Nxp_RotateToZeroPae(void);



//==============================================================================================================================
// FUNC: Nxp_GetTruePae()
//==============================================================================================================================
// DESC:
//==============================================================================================================================
PaeTy Nxp_GetTruePae(void);



#ifdef __NXP_C__
//******************************************************************************************************************************
//******                                         local subsystem definitions                                            ********
//******************************************************************************************************************************

//==============================================================================================================================
// external header requirments for this module
//==============================================================================================================================
//#include "..\Ais\ais.h"                                         // AIS camera interface, image acqisition and processing
//#include "..\Align\align.h"                                     // telescope alignment routines
//#include "..\Astro\astrotime.h"                                 // astro time routines
//#include "..\Astro\taki_astro.h"                                // taki astrometric routines
//#include "..\Lcd\lcd.h"                                         // lcd display interface
//#include "..\Motor\motor.h"                                     // motor controller interface
//#include "..\Time\time.h"                                       // system time and timer interface


//==============================================================================================================================
// subsystem typedefs and defines
//==============================================================================================================================



//==============================================================================================================================
// subsystem static function prototypes
//==============================================================================================================================

//==============================================================================================================================
// FUNC: Nxp_FindErrors()
//==============================================================================================================================
// DESC: solves for the mount error parameters by LSF over all used cal stars, and sets the model instability factor
//==============================================================================================================================
BOOL_D Nxp_FindErrors(
  void
);



//==============================================================================================================================
// FUNC: Nxp_FnAzmAlttoX()
//==============================================================================================================================
// DESC:
//==============================================================================================================================
Vect3Ty Nxp_FnAzmAlttoX(
  double
    Theta,
  double
    Phi
);



//==============================================================================================================================
// FUNC: Nxp_FnCtoEnc()
//==============================================================================================================================
// DESC: this is the main telescope pointing routine RA,Dec are star coords in radians JdMarkD is the Julian Day at time of
//       measurement LSTMark is the LST at time of measurement AltEnc and AzEnc are the corrected and scaled encoder outputs
//       full error model is used generates negative theta solution if Tsign = -1
//==============================================================================================================================
void Nxp_FnCtoEnc(
  double
    LstMarkD,
  double
    JdMarkD,
  double
    RA,
  double
    Dec,
  int
    Tsign,
  double
    *AltEnc,
  double
    *AzEnc
);



//==============================================================================================================================
// FUNC: Nxp_FnCtoX()
//==============================================================================================================================
// DESC: given the J2000 celestial coordinates of the object, observer's Latitude, local sidereal time of measurement, Julian
//       Day of the measurement, this routine routine finds the X,Y,Z coordinates of object in Topocentric coordinate system
//       (X-coords) which include the effects of precession and refraction
//==============================================================================================================================
Vect3Ty Nxp_FnCtoX(
  double
    RaRad0D,
  double
    DecRad0,
  double
    LstMarkD,
  double
    JdMarkD
);



//==============================================================================================================================
// FUNC: Nxp_FnEnctoT()
//==============================================================================================================================
// DESC: given the encoder readings and the mount errors, this routine calculates the 3-vector pointing direction of the
//       telescope in the telescopes coordinate system (T-coords)
//==============================================================================================================================
Vect3Ty Nxp_FnEnctoT(
  double
    AltEnc,
  double
    AzEnc
);



//==============================================================================================================================
// FUNC: Nxp_FnEnctoTAA()
//==============================================================================================================================
// DESC: scales encoder readings to theta and phi in radians removes encoder offsets theta and phi are T-coords
//==============================================================================================================================
void Nxp_FnEnctoTAA(
  double
    AltEnc,
  double
    AzEnc,
  double
    *Theta,
  double
    *Phi
);



//==============================================================================================================================
// FUNC: Nxp_FnTAAtoEnc()
//==============================================================================================================================
// DESC: scales Theta and Phi in radians to encoder ticks adds encoder offsets theta and phi are T-coords
//==============================================================================================================================
void Nxp_FnTAAtoEnc(
  double
    Theta,
  double
    Phi,
  double
    *AltEnc,
  double
    *AzEnc
);



//==============================================================================================================================
// FUNC: Nxp_FnTtoEnc()
//==============================================================================================================================
// DESC: routine calculates the encoder readings needed to point to the 3-vector R in T-coords assuming mount has errors finds
//       negative theta solution if Tsign = -1
//==============================================================================================================================
void Nxp_FnTtoEnc(
  Vect3Ty
    R,
  int
    Tsign,
  double
    *AltEnc,
  double
    *AzEnc
);



//==============================================================================================================================
// FUNC: Nxp_FnTtoTAA
//==============================================================================================================================
// DESC: given the mount errors, Point.MountErorrs(), this routine calculates the telescope pointing direction, Theta and Phi,
//       in the telescope coord system given the uncorrected, desired telescope coordinate three-vector, R Ne is the number of
//       errors to use in the solution generates negative theta solution if Tsign = -1
//==============================================================================================================================
void Nxp_FnTtoTAA(
  Vect3Ty
    R,
  int
    Tsign,
  double
    *Theta,
  double
    *Phi
);



//==============================================================================================================================
// FUNC: Nxp_FnTtoX()
//==============================================================================================================================
// DESC: transforms telescope coords, T, to X-coords telescope axis is assumed to have a pointing error Model.(ErrorWest,
//       ErrorNorth) if equatorial mount then coords are rotated by the colatitude of User.Latitude
//==============================================================================================================================
Vect3Ty Nxp_FnTtoX(
  Vect3Ty
    T
);



//==============================================================================================================================
// FUNC: Nxp_FnXtoAzmAlt()
//==============================================================================================================================
// DESC:
//==============================================================================================================================
void Nxp_FnXtoAzmAlt(
  Vect3Ty
    P,
  int
    Tsign,
  double
    *Theta,
  double
    *Phi
);



//==============================================================================================================================
// FUNC: Nxp_FnXtoC()
//==============================================================================================================================
// DESC: converts Topocentric X-coords at LSTMark LSTMark is local sidereal time celestial coords are in radians star position
//       is de-refracted and de-precessed to JD2000
//==============================================================================================================================
void Nxp_FnXtoC(
  Vect3Ty
    R,
  double
    LstMarkD,
  double
    JdMarkD,
  double
    *RARad,
  double
    *DecRad
);



//==============================================================================================================================
// FUNC: Nxp_FnXtoT()
//==============================================================================================================================
// DESC:
//==============================================================================================================================
Vect3Ty Nxp_FnXtoT(
  Vect3Ty
    P
);



//==============================================================================================================================
// FUNC: Nxp_GetTSignFromAltEnc()
//==============================================================================================================================
// DESC: if using GEM mount, determines which side of merdian object is on
//==============================================================================================================================
int32_t  Nxp_GetTSignFromAltEnc(
  double
    AltEnc
);



//==============================================================================================================================
// FUNC: Nxp_GJ()
//==============================================================================================================================
// DESC: Adds a star to the calibration list
//==============================================================================================================================
BOOL_D Nxp_GJ(
  double
    *Am,
  double
    *Bm,
  int
    N
);



//==============================================================================================================================
// FUNC: Nxp_Normalize()
//==============================================================================================================================
// DESC:
//==============================================================================================================================
Vect3Ty Nxp_Normalize(
  Vect3Ty
    P
);



//==============================================================================================================================
// FUNC: Nxp_PartialDerivatives()
//==============================================================================================================================
// DESC: precess the Ra and Dec from one epoch Jd0D to another Jd1D
//==============================================================================================================================
void Nxp_PartialDerivatives(
  double
    Theta,
  double
    Phi,
  double
    *P
);



//==============================================================================================================================
// FUNC: Nxp_Precess()
//==============================================================================================================================
// DESC: precess the Ra and Dec from one epoch Jd0D to another Jd1D
//==============================================================================================================================
void Nxp_Precess(
  double
   Jd0D,
 double
   Jd1D,
 double
   RaRad0D,
 double
   DecRad0,
 double
   *RaRad1D,
 double
   *DecRad1D
);



//==============================================================================================================================
// FUNC: Nxp_Refract()
//==============================================================================================================================
// DESC:
//==============================================================================================================================
double Nxp_Refract(
  double
    Theta,
  BOOL_D
    ToApparentPositionB
);



//==============================================================================================================================
// FUNC: Nxp_RotAboutX()
//==============================================================================================================================
// DESC:
//==============================================================================================================================
Vect3Ty Nxp_RotAboutX(
  Vect3Ty
    P,
  double
    Alfa
);



//==============================================================================================================================
// FUNC: Nxp_RotAboutY()
//==============================================================================================================================
// DESC:
//==============================================================================================================================
Vect3Ty Nxp_RotAboutY(
  Vect3Ty
    P,
  double
    Alfa
											);



//==============================================================================================================================
// FUNC: Nxp_RotAboutZ()
//==============================================================================================================================
// DESC:
//==============================================================================================================================
Vect3Ty Nxp_RotAboutZ(
	Vect3Ty
	  P,
	double
	  Alpha
);



#endif //#ifdef __C__

#endif //#ifndef __H__
